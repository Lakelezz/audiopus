var searchIndex = JSON.parse('{\
"audiopus":{"doc":"Audiopus is a high level abstraction over the Opus …","t":[4,13,13,13,13,13,4,4,13,4,16,16,13,13,13,13,13,13,13,13,13,13,13,3,13,4,4,13,13,8,8,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,0,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,13,13,13,13,4,4,13,13,13,13,13,13,13,13,13,13,13,13,13,6,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,3,3,11,11,5,11,11,11,11,11,11,11,11,11,11,5,5,5,5,11,11,11,11,11,11,3,11,11,11,11,11,11,11,5,5,11,11,5,5,11,11,11,5,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Application","Audio","Auto","Auto","Auto","Auto","Bandwidth","Bitrate","BitsPerSecond","Channels","Error","Error","Fullband","Hz12000","Hz16000","Hz24000","Hz48000","Hz8000","LowDelay","Max","Mediumband","Mono","Music","MutSignals","Narrowband","SampleRate","Signal","Stereo","Superwideband","TryFrom","TryInto","Voice","Voip","Wideband","as_mut_ptr","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","coder","eq","eq","eq","eq","eq","eq","error","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","hash","hash","hash","hash","hash","hash","i32_len","into","into","into","into","into","into","into","is_mono","is_stereo","ne","packet","repacketizer","softclip","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","Decoder","Encoder","GenericCtl","application","bandwidth","bitrate","borrow","borrow","borrow_mut","borrow_mut","complexity","decode","decode_float","disable_dtx","disable_inband_fec","disable_vbr","disable_vbr_constraint","drop","drop","dtx","enable_dtx","enable_inband_fec","enable_vbr","enable_vbr_constraint","encode","encode_float","encoder_ctl_request","final_range","final_range","final_range","fmt","fmt","force_channels","from","from","gain","inband_fec","into","into","last_packet_duration","lookahead","lsb_depth","max_bandwidth","nb_samples","new","new","packet_loss_perc","phase_inversion_disabled","phase_inversion_disabled","phase_inversion_disabled","pitch","prediction_disabled","reset_state","reset_state","reset_state","sample_rate","sample_rate","sample_rate","set_application","set_bandwidth","set_bitrate","set_complexity","set_dtx","set_encoder_ctl_request","set_force_channels","set_gain","set_inband_fec","set_lsb_depth","set_max_bandwidth","set_packet_loss_perc","set_phase_inversion_disabled","set_phase_inversion_disabled","set_phase_inversion_disabled","set_prediction_disabled","set_signal","set_vbr","set_vbr_constraint","signal","size","size","try_from","try_from","try_into","try_into","type_id","type_id","vbr","vbr_constraint","AllocFail","BadArgument","BufferTooSmall","EmptyPacket","Error","ErrorCode","InternalError","InvalidApplication","InvalidBandwidth","InvalidBitrate","InvalidChannels","InvalidComplexity","InvalidPacket","InvalidSampleRate","InvalidSignal","InvalidState","MappingExpectedLen","Opus","PacketTooLarge","Result","SignalsTooLarge","Unimplemented","Unknown","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","hash","hash","into","into","ne","source","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","try_map_opus_error","type_id","type_id","MutPacket","Packet","as_mut_ptr","as_ptr","bandwidth","borrow","borrow","borrow_mut","borrow_mut","from","from","i32_len","i32_len","into","into","nb_channels","nb_frames","nb_samples","samples_per_frame","try_from","try_from","try_into","try_into","type_id","type_id","Repacketizer","borrow","borrow_mut","default","drop","fmt","from","into","multistream_packet_pad","multistream_packet_unpad","nb_frames","new","packet_pad","packet_unpad","repacketizer_cat","repacketizer_out","repacketizer_out_range","repacketizer_size","try_from","try_into","type_id","SoftClip","apply","borrow","borrow_mut","clone","clone_into","fmt","from","into","new","to_owned","try_from","try_into","type_id"],"q":["audiopus","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","audiopus::coder","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","audiopus::error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","audiopus::packet","","","","","","","","","","","","","","","","","","","","","","","","","audiopus::repacketizer","","","","","","","","","","","","","","","","","","","","","audiopus::softclip","","","","","","","","","","","","",""],"d":["Represents possible application-types for Opus.","Best for broadcast/high-fidelity application where the …","","Default bitrate decided by the encoder (not recommended).","Not supported when constructing encoders or decoders.","Pick the bandwidth automatically.","Represents possible bandwidths of an Opus-stream.","","Explicit bitrate choice (in bits/second).","Represents possible audio channels Opus can use.","","","A 20kHz bandwidth.","","","","","","Only use when lowest-achievable latency is what matters …","Maximum bitrate allowed (up to maximum number of bytes …","A 6kHz bandwidth.","","","A newtype wrapping around a mutable buffer. They …","A 4kHz bandwidth.","Represents possible sample rates Opus can use. Values …","","","A 12kHz bandwidth.","While <code>TryFrom</code> is nightly, we use our own implementation …","While <code>TryInto</code> is nightly, we use our own implementation …","","Best for most VoIP/videoconference applications where …","A 8kHz bandwidth.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Due to checking the length during construction of this …","","","","","","","","","","","","","","","","","","","","","","","","","","Fails if a number does not map a documented Opus sample …","","Fails if a value does not match Opus’ specified …","","","","","","","","","","","","","","","","","","","","","<code>Decoder</code> to decode.","<code>Encoder</code> calls to Opus and offers method to encode and …","A set of methods that both <code>Encoder</code> and <code>Decoder</code> have …","Gets the encoder’s configured application.","Gets the encoder’s configured bandpass.","Gets the encoder’s configured bandpass.","","","","","Gets the encoder’s complexity configuration.","Decodes an Opus packet as <code>input</code> and writes decoded data …","Decodes an Opus frame from floating point input.","Disables the encoder’s use of discontinuous …","Disables the encoder’s use of inband forward error …","Disables variable bitrate (VBR) in the encoder.","Disables variable bitrate (VBR) in the encoder.","We have to ensure that the resource our wrapping …","We have to ensure that the resource our wrapping …","Gets encoder’s configured use of discontinuous …","Enables the encoder’s use of discontinuous transmission …","Enables the encoder’s use of inband forward error …","Enables variable bitrate (VBR) in the encoder.","Enables variable bitrate (VBR) in the encoder.","Encodes an Opus frame.","Encodes an Opus frame from floating point input.","Issues a CTL get-<code>request</code> to Opus. If Opus returns a …","","","Gets the final state of the codec’s entropy coder.","","","Gets the encoder’s forced channel configuration.","","","Gets the decoder’s configured amount to scale PCM …","Gets encoder’s configured use of inband forward error …","","","Gets the duration (in samples) of the last packet …","Gets the total samples of delay added by the entire codec.","Gets the encoder’s configured signal depth.","Gets the encoder’s configured maximum allowed bandpass.","Gets the number of samples of an Opus packet.","Creates a new Opus decoder.","Creates a new Opus encoder.","Gets the encoder’s configured packet loss percentage.","","","Gets the encoder’s configured phase inversion status.","Gets the pitch period at 48 kHz of the last decoded …","Gets the encoder’s configured prediction status.","","","Resets the codec state to be equivalent to a freshly …","","","Gets the sampling rate the encoder or decoder was …","Configures the encoder’s intended application.","Sets the encoder’s bandpass to a specific value.","Configures the bitrate in the encoder.","Configures the encoder’s computational complexity.","Configures the encoder’s use of discontinuous …","Issues a CTL set-<code>request</code> to Opus and sets the <code>Encoder</code>’s …","Configures mono/stereo forcing in the encoder.","Configures decoder gain adjustment.","Configures the encoder’s use of inband forward error …","Configures the depth of signal being encoded.","Configures the maximum bandpass that the encoder will …","Higher values trigger progressively more loss resistant …","","","If set to <code>true</code>, disables the use of phase inversion for …","If set <code>prediction_disabled</code> to <code>true</code>, disables almost all …","Configures the type of signal being encoded.","Sets variable bitrate (VBR) in the encoder.","Sets variable bitrate (VBR) in the encoder.","Gets the encoder’s configured signal type.","Gets size of an Opus-decoder in bytes.","Gets size of self’s underlying Opus-decoder in bytes.","","","","","","","Determine if variable bitrate (VBR) is enabled in the …","Determine if constrained VBR is enabled in the encoder.","","","","Opus is not operating empty packets.","","","","A value failed to match a documented <code>Application</code>.","A value failed to match a documented <code>Bandwidth</code>.","A value failed to match a documented <code>Bitrate</code>, negative …","A value failed to match a documented <code>Channels</code>.","Complexity was lower than 1 or higher than 10.","","A value failed to match a documented <code>SampleRate</code>.","A value failed to match a documented <code>Signal</code>.","","A <code>Vec</code> representing a mapping exceeded the expected value.","An error returned from Opus containing an [<code>ErrorCode</code>] …","Opus’ maximum <code>Vec</code> or slice length of <code>std::i32::MAX</code> has …","","Opus’ maximum <code>Vec</code> or slice length of <code>std::i32::MAX</code> has …","","Occurs when Opus sends an error value that is not …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Checks if the <code>ffi_return_value</code> is documented by Opus. …","","","A newtype around <code>&mut [u8]</code> to guarantee that accessing …","A newtype around <code>&[u8]</code> to guarantee:","","","Gets bandwidth of an Opus <code>packet</code>.","","","","","","","The underlying type is immutably borrowed and has been …","Checks if the underlying buffer meets requirements.","","","Gets number of channels in an Opus <code>packet</code>.","Gets number of frames in an Opus <code>packet</code>.","Gets number of samples in an Opus <code>packet</code>.","Gets number of samples per frame of an Opus <code>packet</code>.","","","","","","","","","","","We have to ensure that the resource our wrapping …","","","","","","","","","","","","","Returns Opus’ internal <code>OpusRepacketizer</code>’s size in …","","","","","Opus applies soft-clipping to bring a f32 signal within …","","","","","","","","","","","",""],"i":[0,1,2,3,4,5,0,0,3,0,6,7,5,8,8,8,8,8,1,3,5,4,2,0,5,0,0,4,5,0,0,2,1,5,9,9,2,3,8,1,4,5,9,2,3,8,1,4,5,2,3,8,1,4,5,2,3,8,1,4,5,0,2,3,8,1,4,5,0,2,3,8,1,4,5,9,2,3,8,1,4,5,2,3,8,1,4,5,9,9,2,3,8,1,4,5,4,4,3,0,0,0,2,3,8,1,4,5,6,9,2,2,3,3,8,8,1,1,4,4,5,5,7,9,2,3,8,1,4,5,9,2,3,8,1,4,5,0,0,0,10,10,10,11,10,11,10,10,11,11,10,10,10,10,11,10,10,10,10,10,10,10,10,10,12,11,10,11,10,10,11,10,11,10,11,10,11,10,10,10,11,11,10,10,12,11,10,11,10,12,11,10,12,11,10,10,10,10,10,10,10,10,11,10,10,10,10,12,11,10,10,10,10,10,10,0,11,11,10,11,10,11,10,10,10,13,13,13,14,0,0,13,14,14,14,14,14,13,14,14,13,14,14,14,0,14,13,13,14,13,14,13,14,13,14,13,14,13,14,14,13,13,14,14,13,13,14,13,14,13,14,14,14,13,14,13,14,13,14,13,0,14,13,0,0,15,16,0,16,15,16,15,16,15,16,15,16,15,0,0,0,0,16,15,16,15,16,15,0,17,17,17,17,17,17,17,0,0,17,17,0,0,17,17,17,0,17,17,17,0,18,18,18,18,18,18,18,18,18,18,18,18,18],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["signal",4]],[[],["bitrate",4]],[[],["samplerate",4]],[[],["application",4]],[[],["channels",4]],[[],["bandwidth",4]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[["signal",4]],["bool",15]],[[["bitrate",4]],["bool",15]],[[["samplerate",4]],["bool",15]],[[["application",4]],["bool",15]],[[["channels",4]],["bool",15]],[[["bandwidth",4]],["bool",15]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["i32",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[["bitrate",4]],["bool",15]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",6]],[[],["result",4]],[[["i32",15]],["result",6]],[[],["result",4]],[[["i32",15]],[["bitrate",4],["result",6]]],[[],["result",4]],[[["i32",15]],["result",6]],[[],["result",4]],[[["i32",15]],["result",6]],[[],["result",4]],[[["i32",15]],[["result",6],["channels",4]]],[[],["result",4]],[[["i32",15]],["result",6]],[[],["result",4]],[[],["result",6]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,[[],[["result",6],["application",4]]],[[],[["result",6],["bandwidth",4]]],[[],[["bitrate",4],["result",6]]],[[]],[[]],[[]],[[]],[[],[["u8",15],["result",6]]],[[["bool",15],["option",4]],[["usize",15],["result",6]]],[[["bool",15],["option",4]],[["usize",15],["result",6]]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[]],[[]],[[],[["bool",15],["result",6]]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],[["usize",15],["result",6]]],[[],[["usize",15],["result",6]]],[[["i32",15]],[["i32",15],["result",6]]],[[],[["result",4],["u32",15],["error",4]]],[[],[["u32",15],["result",6]]],[[],[["u32",15],["result",6]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[],[["result",6],["channels",4]]],[[]],[[]],[[],[["i32",15],["result",6]]],[[],[["bool",15],["result",6]]],[[]],[[]],[[],[["u32",15],["result",6]]],[[],[["u32",15],["result",6]]],[[],[["u8",15],["result",6]]],[[],[["result",6],["bandwidth",4]]],[[],[["usize",15],["result",6]]],[[["samplerate",4],["channels",4]],[["result",6],["decoder",3]]],[[["samplerate",4],["channels",4],["application",4]],[["result",6],["encoder",3]]],[[],[["u8",15],["result",6]]],[[],[["result",4],["bool",15],["error",4]]],[[],[["bool",15],["result",6]]],[[],[["bool",15],["result",6]]],[[],[["i32",15],["result",6]]],[[],[["bool",15],["result",6]]],[[],[["result",4],["error",4]]],[[],["result",6]],[[],["result",6]],[[],[["samplerate",4],["result",4],["error",4]]],[[],[["samplerate",4],["result",6]]],[[],[["samplerate",4],["result",6]]],[[["application",4]],["result",6]],[[["bandwidth",4]],["result",6]],[[["bitrate",4]],["result",6]],[[["u8",15]],["result",6]],[[["bool",15]],["result",6]],[[["i32",15]],["result",6]],[[["channels",4]],["result",6]],[[["i32",15]],["result",6]],[[["bool",15]],["result",6]],[[["u8",15]],["result",6]],[[["bandwidth",4]],["result",6]],[[["u8",15]],["result",6]],[[["bool",15]],[["result",4],["error",4]]],[[["bool",15]],["result",6]],[[["bool",15]],["result",6]],[[["bool",15]],["result",6]],[[["signal",4]],["result",6]],[[["bool",15]],["result",6]],[[["bool",15]],["result",6]],[[],[["signal",4],["result",6]]],[[["channels",4]],["usize",15]],[[],["usize",15]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],[["bool",15],["result",6]]],[[],[["bool",15],["result",6]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["error",4]],[[],["errorcode",4]],[[]],[[]],[[["error",4]],["bool",15]],[[["errorcode",4]],["bool",15]],[[["formatter",3]],["fmtresult",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["fmtresult",6]],[[["formatter",3]],["result",6]],[[["errorcode",4]],["error",4]],[[]],[[["i32",15]],["errorcode",4]],[[]],[[]],[[]],[[]],[[]],[[["error",4]],["bool",15]],[[],[["stderror",8],["option",4]]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["i32",15]],[["i32",15],["result",6]]],[[],["typeid",3]],[[],["typeid",3]],null,null,[[]],[[]],[[],[["result",6],["bandwidth",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["i32",15]],[[],[["i32",15],["result",6]]],[[]],[[]],[[],[["result",6],["channels",4]]],[[],[["usize",15],["result",6]]],[[["samplerate",4]],[["usize",15],["result",6]]],[[["samplerate",4]],[["usize",15],["result",6]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,[[]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],[[["usize",15]],["result",6]],[[["usize",15]],["result",6]],[[],["usize",15]],[[]],[[["i32",15]],["result",6]],[[],["result",6]],[[],["result",6]],[[["i32",15]],["result",6]],[[["i32",15]],["result",6]],[[],["usize",15]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[],["result",6]],[[]],[[]],[[],["softclip",3]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],[[["channels",4]]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]]],"p":[[4,"Application"],[4,"Signal"],[4,"Bitrate"],[4,"Channels"],[4,"Bandwidth"],[8,"TryFrom"],[8,"TryInto"],[4,"SampleRate"],[3,"MutSignals"],[3,"Encoder"],[3,"Decoder"],[8,"GenericCtl"],[4,"ErrorCode"],[4,"Error"],[3,"MutPacket"],[3,"Packet"],[3,"Repacketizer"],[3,"SoftClip"]]}\
}');
initSearch(searchIndex);